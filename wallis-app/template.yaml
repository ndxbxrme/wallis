AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  wallis-app

  Sample SAM Template for wallis-app
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Authorization,Content-Type'"
      AllowOrigin: "'*'"

Resources:
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Wallis website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for wallis website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Change bucket name to reflect your website
      BucketName: !Sub "wallis-${StageName}"

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
      # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
  #api
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'Authorization,Content-Type'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False
  #cognito
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: WallisUserPool
  
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: WallisUserPoolClientName
      GenerateSecret: false
  #dynamo
  DrawingsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Wallis-DrawingsTable
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
        
  FetchDrawingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fetch-drawings/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DrawingsTable
      Environment:
        Variables:
          CURRENT_TABLE: !Ref DrawingsTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /drawings
            Method: get   
  SaveDrawingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: save-drawing/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DrawingsTable
      Environment:
        Variables:
          CURRENT_TABLE: !Ref DrawingsTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /drawing
            Method: post   
  DeleteDrawingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-drawing/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DrawingsTable
      Environment:
        Variables:
          CURRENT_TABLE: !Ref DrawingsTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /drawing
            Method: delete  
  RenderPDFFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: render-pdf/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Timeout: 30
      MemorySize: 512
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /render-pdf
            Method: post  
  SaveImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: save-image/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /save-image
            Method: post  
Outputs:
  DataEndpoint:
    Description: "API Endpoint"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  CognitoUserPool:
    Description: "Cognito User Pool"
    Value: !Sub "${MyCognitoUserPool}"
  CognitoUserPoolClient:
    Description: "Cognito User Pool Client"
    Value: !Sub "${MyCognitoUserPoolClient}"
